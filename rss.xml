<?xml version="1.0" encoding="utf-8"?>
<?xml-stylesheet type="text/xsl" href="assets/xml/rss.xsl" media="all"?><rss version="2.0" xmlns:dc="http://purl.org/dc/elements/1.1/" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Joon's Blog</title><link>http://joonro.github.io/blog/</link><description>Joon's Blog</description><atom:link href="http://joonro.github.io/blog/rss.xml" rel="self" type="application/rss+xml"></atom:link><language>en</language><lastBuildDate>Mon, 02 Mar 2020 00:24:51 GMT</lastBuildDate><generator>Nikola (getnikola.com)</generator><docs>http://blogs.law.harvard.edu/tech/rss</docs><item><title>My PowerShell Customizations</title><link>http://joonro.github.io/blog/posts/powershell-customizations/</link><dc:creator>Joon Ro</dc:creator><description>&lt;div&gt;&lt;p&gt;I describe my customizations for PowerShell. With these, my PowerShell
terminal looks like the following screenshot. Not only these customizations
make it look great, but also they make me productive in the command line in
Windows.&lt;/p&gt;
&lt;img alt="../../images/posh_prompt.png" src="http://joonro.github.io/blog/images/posh_prompt.png"&gt;
&lt;div class="section" id="conemu"&gt;
&lt;h2&gt;ConEmu&lt;/h2&gt;
&lt;p&gt;I use ConEmu as my terminal emulator. ConEmu provides tabbed sessions,
changing color schemes on-the-fly, and many customization options.&lt;/p&gt;
&lt;div class="section" id="color-themes"&gt;
&lt;h3&gt;Color Themes&lt;/h3&gt;
&lt;p&gt;The screenshots are taken with &lt;code class="docutils literal"&gt;&lt;span class="pre"&gt;moe-dark&lt;/span&gt; theme&lt;/code&gt;. ConEmu comes with many color
schemes, and I also maintain a github repository which contains my favorite
color themes for ConEmu. You can check out the &lt;a class="reference external" href="https://github.com/joonro/ConEmu-Color-Themes"&gt;GitHub&lt;/a&gt; repository.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class="section" id="posh-git-and-prompt-customization"&gt;
&lt;h2&gt;posh-git and prompt customization&lt;/h2&gt;
&lt;div class="admonition note"&gt;
&lt;p class="admonition-title"&gt;Note&lt;/p&gt;
&lt;p&gt;The current customization is for posh-git 0.7.x. posh-git 1.0.0 uses
a different way of customization.&lt;/p&gt;
&lt;/div&gt;
&lt;p&gt;To get git-related information on your prompt, you should get &lt;a class="reference external" href="https://github.com/dahlbyk/posh-git"&gt;posh-git&lt;/a&gt;. Then,
you can show the git-related information along with other useful information
by modifying &lt;code class="docutils literal"&gt;prompt()&lt;/code&gt; function. For example:&lt;/p&gt;
&lt;pre class="code powershell"&gt;&lt;a name="rest_code_e72e1cdd4ee64f1c8a916db18403fbb1-1"&gt;&lt;/a&gt;&lt;span class="c"&gt;# http://serverfault.com/questions/95431&lt;/span&gt;
&lt;a name="rest_code_e72e1cdd4ee64f1c8a916db18403fbb1-2"&gt;&lt;/a&gt;&lt;span class="k"&gt;function&lt;/span&gt; &lt;span class="nb"&gt;Test-Administrator&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
&lt;a name="rest_code_e72e1cdd4ee64f1c8a916db18403fbb1-3"&gt;&lt;/a&gt;    &lt;span class="nv"&gt;$user&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="no"&gt;[Security.Principal.WindowsIdentity]&lt;/span&gt;&lt;span class="p"&gt;::&lt;/span&gt;&lt;span class="n"&gt;GetCurrent&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
&lt;a name="rest_code_e72e1cdd4ee64f1c8a916db18403fbb1-4"&gt;&lt;/a&gt;    &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;New-Object&lt;/span&gt; &lt;span class="n"&gt;Security&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Principal&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;WindowsPrincipal&lt;/span&gt; &lt;span class="nv"&gt;$user&lt;/span&gt;&lt;span class="p"&gt;).&lt;/span&gt;&lt;span class="n"&gt;IsInRole&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="no"&gt;[Security.Principal.WindowsBuiltinRole]&lt;/span&gt;&lt;span class="p"&gt;::&lt;/span&gt;&lt;span class="n"&gt;Administrator&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;a name="rest_code_e72e1cdd4ee64f1c8a916db18403fbb1-5"&gt;&lt;/a&gt;&lt;span class="p"&gt;}&lt;/span&gt;
&lt;a name="rest_code_e72e1cdd4ee64f1c8a916db18403fbb1-6"&gt;&lt;/a&gt;
&lt;a name="rest_code_e72e1cdd4ee64f1c8a916db18403fbb1-7"&gt;&lt;/a&gt;&lt;span class="k"&gt;function&lt;/span&gt; &lt;span class="n"&gt;prompt&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
&lt;a name="rest_code_e72e1cdd4ee64f1c8a916db18403fbb1-8"&gt;&lt;/a&gt;    &lt;span class="c"&gt;# https://github.com/dahlbyk/posh-git/wiki/Customizing-Your-PowerShell-Prompt&lt;/span&gt;
&lt;a name="rest_code_e72e1cdd4ee64f1c8a916db18403fbb1-9"&gt;&lt;/a&gt;    &lt;span class="nv"&gt;$origLastExitCode&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="nv"&gt;$LastExitCode&lt;/span&gt;
&lt;a name="rest_code_e72e1cdd4ee64f1c8a916db18403fbb1-10"&gt;&lt;/a&gt;    &lt;span class="nb"&gt;Write-VcsStatus&lt;/span&gt;
&lt;a name="rest_code_e72e1cdd4ee64f1c8a916db18403fbb1-11"&gt;&lt;/a&gt;
&lt;a name="rest_code_e72e1cdd4ee64f1c8a916db18403fbb1-12"&gt;&lt;/a&gt;    &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;Test-Administrator&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;  &lt;span class="c"&gt;# if elevated&lt;/span&gt;
&lt;a name="rest_code_e72e1cdd4ee64f1c8a916db18403fbb1-13"&gt;&lt;/a&gt;        &lt;span class="nb"&gt;Write-Host&lt;/span&gt; &lt;span class="s2"&gt;"(Elevated) "&lt;/span&gt; &lt;span class="n"&gt;-NoNewline&lt;/span&gt; &lt;span class="n"&gt;-ForegroundColor&lt;/span&gt; &lt;span class="n"&gt;White&lt;/span&gt;
&lt;a name="rest_code_e72e1cdd4ee64f1c8a916db18403fbb1-14"&gt;&lt;/a&gt;    &lt;span class="p"&gt;}&lt;/span&gt;
&lt;a name="rest_code_e72e1cdd4ee64f1c8a916db18403fbb1-15"&gt;&lt;/a&gt;
&lt;a name="rest_code_e72e1cdd4ee64f1c8a916db18403fbb1-16"&gt;&lt;/a&gt;    &lt;span class="nb"&gt;Write-Host&lt;/span&gt; &lt;span class="s2"&gt;"$env:USERNAME@"&lt;/span&gt; &lt;span class="n"&gt;-NoNewline&lt;/span&gt; &lt;span class="n"&gt;-ForegroundColor&lt;/span&gt; &lt;span class="n"&gt;Red&lt;/span&gt;
&lt;a name="rest_code_e72e1cdd4ee64f1c8a916db18403fbb1-17"&gt;&lt;/a&gt;    &lt;span class="nb"&gt;Write-Host&lt;/span&gt; &lt;span class="s2"&gt;"$env:COMPUTERNAME"&lt;/span&gt; &lt;span class="n"&gt;-NoNewline&lt;/span&gt; &lt;span class="n"&gt;-ForegroundColor&lt;/span&gt; &lt;span class="n"&gt;Yellow&lt;/span&gt;
&lt;a name="rest_code_e72e1cdd4ee64f1c8a916db18403fbb1-18"&gt;&lt;/a&gt;    &lt;span class="nb"&gt;Write-Host&lt;/span&gt; &lt;span class="s2"&gt;" : "&lt;/span&gt; &lt;span class="n"&gt;-NoNewline&lt;/span&gt; &lt;span class="n"&gt;-ForegroundColor&lt;/span&gt; &lt;span class="n"&gt;DarkGray&lt;/span&gt;
&lt;a name="rest_code_e72e1cdd4ee64f1c8a916db18403fbb1-19"&gt;&lt;/a&gt;
&lt;a name="rest_code_e72e1cdd4ee64f1c8a916db18403fbb1-20"&gt;&lt;/a&gt;    &lt;span class="nv"&gt;$curPath&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="nv"&gt;$ExecutionContext&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;SessionState&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Path&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;CurrentLocation&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Path&lt;/span&gt;
&lt;a name="rest_code_e72e1cdd4ee64f1c8a916db18403fbb1-21"&gt;&lt;/a&gt;    &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;$curPath&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;ToLower&lt;/span&gt;&lt;span class="p"&gt;().&lt;/span&gt;&lt;span class="n"&gt;StartsWith&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;$Home&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;ToLower&lt;/span&gt;&lt;span class="p"&gt;()))&lt;/span&gt;
&lt;a name="rest_code_e72e1cdd4ee64f1c8a916db18403fbb1-22"&gt;&lt;/a&gt;    &lt;span class="p"&gt;{&lt;/span&gt;
&lt;a name="rest_code_e72e1cdd4ee64f1c8a916db18403fbb1-23"&gt;&lt;/a&gt;        &lt;span class="nv"&gt;$curPath&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="s2"&gt;"~"&lt;/span&gt; &lt;span class="p"&gt;+&lt;/span&gt; &lt;span class="nv"&gt;$curPath&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;SubString&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;$Home&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Length&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;a name="rest_code_e72e1cdd4ee64f1c8a916db18403fbb1-24"&gt;&lt;/a&gt;    &lt;span class="p"&gt;}&lt;/span&gt;
&lt;a name="rest_code_e72e1cdd4ee64f1c8a916db18403fbb1-25"&gt;&lt;/a&gt;
&lt;a name="rest_code_e72e1cdd4ee64f1c8a916db18403fbb1-26"&gt;&lt;/a&gt;    &lt;span class="nb"&gt;Write-Host&lt;/span&gt; &lt;span class="nv"&gt;$curPath&lt;/span&gt; &lt;span class="n"&gt;-NoNewline&lt;/span&gt; &lt;span class="n"&gt;-ForegroundColor&lt;/span&gt; &lt;span class="n"&gt;Green&lt;/span&gt;
&lt;a name="rest_code_e72e1cdd4ee64f1c8a916db18403fbb1-27"&gt;&lt;/a&gt;    &lt;span class="nb"&gt;Write-Host&lt;/span&gt; &lt;span class="s2"&gt;" : "&lt;/span&gt; &lt;span class="n"&gt;-NoNewline&lt;/span&gt; &lt;span class="n"&gt;-ForegroundColor&lt;/span&gt; &lt;span class="n"&gt;DarkGray&lt;/span&gt;
&lt;a name="rest_code_e72e1cdd4ee64f1c8a916db18403fbb1-28"&gt;&lt;/a&gt;    &lt;span class="nb"&gt;Write-Host&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;Get-Date&lt;/span&gt; &lt;span class="n"&gt;-Format&lt;/span&gt; &lt;span class="n"&gt;G&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="n"&gt;-NoNewline&lt;/span&gt; &lt;span class="n"&gt;-ForegroundColor&lt;/span&gt; &lt;span class="n"&gt;Blue&lt;/span&gt;
&lt;a name="rest_code_e72e1cdd4ee64f1c8a916db18403fbb1-29"&gt;&lt;/a&gt;    &lt;span class="nb"&gt;Write-Host&lt;/span&gt; &lt;span class="s2"&gt;" : "&lt;/span&gt; &lt;span class="n"&gt;-NoNewline&lt;/span&gt; &lt;span class="n"&gt;-ForegroundColor&lt;/span&gt; &lt;span class="n"&gt;DarkGray&lt;/span&gt;
&lt;a name="rest_code_e72e1cdd4ee64f1c8a916db18403fbb1-30"&gt;&lt;/a&gt;    &lt;span class="nv"&gt;$LastExitCode&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="nv"&gt;$origLastExitCode&lt;/span&gt;
&lt;a name="rest_code_e72e1cdd4ee64f1c8a916db18403fbb1-31"&gt;&lt;/a&gt;    &lt;span class="s2"&gt;"&lt;/span&gt;&lt;span class="se"&gt;`n&lt;/span&gt;&lt;span class="p"&gt;$(&lt;/span&gt;&lt;span class="s1"&gt;'&amp;gt;'&lt;/span&gt; &lt;span class="p"&gt;*&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;$nestedPromptLevel&lt;/span&gt; &lt;span class="p"&gt;+&lt;/span&gt; &lt;span class="n"&gt;1&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;&lt;span class="s2"&gt; "&lt;/span&gt;
&lt;a name="rest_code_e72e1cdd4ee64f1c8a916db18403fbb1-32"&gt;&lt;/a&gt;&lt;span class="p"&gt;}&lt;/span&gt;
&lt;a name="rest_code_e72e1cdd4ee64f1c8a916db18403fbb1-33"&gt;&lt;/a&gt;
&lt;a name="rest_code_e72e1cdd4ee64f1c8a916db18403fbb1-34"&gt;&lt;/a&gt;&lt;span class="nb"&gt;Import-Module&lt;/span&gt; &lt;span class="n"&gt;posh-git&lt;/span&gt;
&lt;a name="rest_code_e72e1cdd4ee64f1c8a916db18403fbb1-35"&gt;&lt;/a&gt;
&lt;a name="rest_code_e72e1cdd4ee64f1c8a916db18403fbb1-36"&gt;&lt;/a&gt;&lt;span class="nv"&gt;$global:GitPromptSettings&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;BeforeText&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="s1"&gt;'['&lt;/span&gt;
&lt;a name="rest_code_e72e1cdd4ee64f1c8a916db18403fbb1-37"&gt;&lt;/a&gt;&lt;span class="nv"&gt;$global:GitPromptSettings&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;AfterText&lt;/span&gt;  &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="s1"&gt;'] '&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;div class="section" id="color-coding-get-childitem"&gt;
&lt;h2&gt;Color coding &lt;code class="docutils literal"&gt;&lt;span class="pre"&gt;Get-ChildItem&lt;/span&gt;&lt;/code&gt;&lt;/h2&gt;
&lt;p&gt;To color-code the results of &lt;code class="docutils literal"&gt;&lt;span class="pre"&gt;Get-ChildItem&lt;/span&gt;&lt;/code&gt;, I use my own
&lt;a class="reference external" href="https://github.com/joonro/Get-ChildItemColor"&gt;Get-ChildItemColor&lt;/a&gt;. Once you install it, you can set aliases to the exposed functions:&lt;/p&gt;
&lt;pre class="code powershell"&gt;&lt;a name="rest_code_11ac22bcca6a4762889a5bfcf7b59ab4-1"&gt;&lt;/a&gt;&lt;span class="k"&gt;If&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;-Not&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;Test-Path&lt;/span&gt; &lt;span class="n"&gt;Variable&lt;/span&gt;&lt;span class="err"&gt;:&lt;/span&gt;&lt;span class="n"&gt;PSise&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;  &lt;span class="c"&gt;# Only run this in the console and not in the ISE&lt;/span&gt;
&lt;a name="rest_code_11ac22bcca6a4762889a5bfcf7b59ab4-2"&gt;&lt;/a&gt;    &lt;span class="nb"&gt;Import-Module&lt;/span&gt; &lt;span class="nb"&gt;Get-ChildItemColor&lt;/span&gt;
&lt;a name="rest_code_11ac22bcca6a4762889a5bfcf7b59ab4-3"&gt;&lt;/a&gt;
&lt;a name="rest_code_11ac22bcca6a4762889a5bfcf7b59ab4-4"&gt;&lt;/a&gt;    &lt;span class="nb"&gt;Set-Alias&lt;/span&gt; &lt;span class="n"&gt;l&lt;/span&gt; &lt;span class="nb"&gt;Get-ChildItemColor&lt;/span&gt; &lt;span class="n"&gt;-option&lt;/span&gt; &lt;span class="n"&gt;AllScope&lt;/span&gt;
&lt;a name="rest_code_11ac22bcca6a4762889a5bfcf7b59ab4-5"&gt;&lt;/a&gt;    &lt;span class="nb"&gt;Set-Alias&lt;/span&gt; &lt;span class="nb"&gt;ls Get-ChildItemColorFormatWide&lt;/span&gt; &lt;span class="n"&gt;-option&lt;/span&gt; &lt;span class="n"&gt;AllScope&lt;/span&gt;
&lt;a name="rest_code_11ac22bcca6a4762889a5bfcf7b59ab4-6"&gt;&lt;/a&gt;&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;p&gt;so you have colored versions of &lt;code class="docutils literal"&gt;l&lt;/code&gt; and &lt;code class="docutils literal"&gt;ls&lt;/code&gt; equivalents.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="psreadline"&gt;
&lt;h2&gt;PSReadLine&lt;/h2&gt;
&lt;p&gt;&lt;a class="reference external" href="https://github.com/lzybkr/PSReadLine"&gt;PSReadLine&lt;/a&gt; makes PowerShell to behave like &lt;code class="docutils literal"&gt;zsh&lt;/code&gt;, which is my favorite shell
in GNU/Linux. It gives you substring history search, incremental history
search, and awesome tab-completion. The following is my current setup:&lt;/p&gt;
&lt;pre class="code powershell"&gt;&lt;a name="rest_code_0e2cbe5e75904ecdaeb720f475132508-1"&gt;&lt;/a&gt;&lt;span class="nb"&gt;Import-Module&lt;/span&gt; &lt;span class="n"&gt;PSReadLine&lt;/span&gt;
&lt;a name="rest_code_0e2cbe5e75904ecdaeb720f475132508-2"&gt;&lt;/a&gt;
&lt;a name="rest_code_0e2cbe5e75904ecdaeb720f475132508-3"&gt;&lt;/a&gt;&lt;span class="nb"&gt;Set-PSReadLineOption&lt;/span&gt; &lt;span class="n"&gt;-HistoryNoDuplicates&lt;/span&gt;
&lt;a name="rest_code_0e2cbe5e75904ecdaeb720f475132508-4"&gt;&lt;/a&gt;&lt;span class="nb"&gt;Set-PSReadLineOption&lt;/span&gt; &lt;span class="n"&gt;-HistorySearchCursorMovesToEnd&lt;/span&gt;
&lt;a name="rest_code_0e2cbe5e75904ecdaeb720f475132508-5"&gt;&lt;/a&gt;&lt;span class="nb"&gt;Set-PSReadLineOption&lt;/span&gt; &lt;span class="n"&gt;-HistorySaveStyle&lt;/span&gt; &lt;span class="n"&gt;SaveIncrementally&lt;/span&gt;
&lt;a name="rest_code_0e2cbe5e75904ecdaeb720f475132508-6"&gt;&lt;/a&gt;&lt;span class="nb"&gt;Set-PSReadLineOption&lt;/span&gt; &lt;span class="n"&gt;-MaximumHistoryCount&lt;/span&gt; &lt;span class="n"&gt;4000&lt;/span&gt;
&lt;a name="rest_code_0e2cbe5e75904ecdaeb720f475132508-7"&gt;&lt;/a&gt;&lt;span class="c"&gt;# history substring search&lt;/span&gt;
&lt;a name="rest_code_0e2cbe5e75904ecdaeb720f475132508-8"&gt;&lt;/a&gt;&lt;span class="nb"&gt;Set-PSReadlineKeyHandler&lt;/span&gt; &lt;span class="n"&gt;-Key&lt;/span&gt; &lt;span class="n"&gt;UpArrow&lt;/span&gt; &lt;span class="n"&gt;-Function&lt;/span&gt; &lt;span class="n"&gt;HistorySearchBackward&lt;/span&gt;
&lt;a name="rest_code_0e2cbe5e75904ecdaeb720f475132508-9"&gt;&lt;/a&gt;&lt;span class="nb"&gt;Set-PSReadlineKeyHandler&lt;/span&gt; &lt;span class="n"&gt;-Key&lt;/span&gt; &lt;span class="n"&gt;DownArrow&lt;/span&gt; &lt;span class="n"&gt;-Function&lt;/span&gt; &lt;span class="n"&gt;HistorySearchForward&lt;/span&gt;
&lt;a name="rest_code_0e2cbe5e75904ecdaeb720f475132508-10"&gt;&lt;/a&gt;
&lt;a name="rest_code_0e2cbe5e75904ecdaeb720f475132508-11"&gt;&lt;/a&gt;&lt;span class="c"&gt;# Tab completion&lt;/span&gt;
&lt;a name="rest_code_0e2cbe5e75904ecdaeb720f475132508-12"&gt;&lt;/a&gt;&lt;span class="nb"&gt;Set-PSReadlineKeyHandler&lt;/span&gt; &lt;span class="n"&gt;-Chord&lt;/span&gt; &lt;span class="s1"&gt;'Shift+Tab'&lt;/span&gt; &lt;span class="n"&gt;-Function&lt;/span&gt; &lt;span class="n"&gt;Complete&lt;/span&gt;
&lt;a name="rest_code_0e2cbe5e75904ecdaeb720f475132508-13"&gt;&lt;/a&gt;&lt;span class="nb"&gt;Set-PSReadlineKeyHandler&lt;/span&gt; &lt;span class="n"&gt;-Key&lt;/span&gt; &lt;span class="n"&gt;Tab&lt;/span&gt; &lt;span class="n"&gt;-Function&lt;/span&gt; &lt;span class="n"&gt;MenuComplete&lt;/span&gt;
&lt;/pre&gt;&lt;p&gt;With these settings, I can press up and down arrows for history substring
search, and the tab completion shows me available candidates. For example:&lt;/p&gt;
&lt;img alt="../../images/posh_PSReadLine_tab_completion.png" src="http://joonro.github.io/blog/images/posh_PSReadLine_tab_completion.png"&gt;
&lt;p&gt;You can also use &lt;code class="docutils literal"&gt;CTRL + r&lt;/code&gt; for incremental history search.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="others"&gt;
&lt;h2&gt;Others&lt;/h2&gt;
&lt;div class="section" id="cddash"&gt;
&lt;h3&gt;&lt;code class="docutils literal"&gt;cddash&lt;/code&gt;&lt;/h3&gt;
&lt;p&gt;You can use the following to have the "dash" functionality - namely, you can go
back to the previous location by typing &lt;code class="docutils literal"&gt;cd -&lt;/code&gt;. It is from
&lt;a class="reference external" href="http://goo.gl/xRbYbk"&gt;http://goo.gl/xRbYbk&lt;/a&gt;.&lt;/p&gt;
&lt;pre class="code powershell"&gt;&lt;a name="rest_code_263faeaff61345929d2c3d701e21476e-1"&gt;&lt;/a&gt;&lt;span class="k"&gt;function&lt;/span&gt; &lt;span class="n"&gt;cddash&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
&lt;a name="rest_code_263faeaff61345929d2c3d701e21476e-2"&gt;&lt;/a&gt;    &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;$args&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;0&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;-eq&lt;/span&gt; &lt;span class="s1"&gt;'-'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
&lt;a name="rest_code_263faeaff61345929d2c3d701e21476e-3"&gt;&lt;/a&gt;        &lt;span class="nv"&gt;$pwd&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="nv"&gt;$OLDPWD&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;a name="rest_code_263faeaff61345929d2c3d701e21476e-4"&gt;&lt;/a&gt;    &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;else&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
&lt;a name="rest_code_263faeaff61345929d2c3d701e21476e-5"&gt;&lt;/a&gt;        &lt;span class="nv"&gt;$pwd&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="nv"&gt;$args&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;0&lt;/span&gt;&lt;span class="p"&gt;];&lt;/span&gt;
&lt;a name="rest_code_263faeaff61345929d2c3d701e21476e-6"&gt;&lt;/a&gt;    &lt;span class="p"&gt;}&lt;/span&gt;
&lt;a name="rest_code_263faeaff61345929d2c3d701e21476e-7"&gt;&lt;/a&gt;    &lt;span class="nv"&gt;$tmp&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="n"&gt;pwd&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;a name="rest_code_263faeaff61345929d2c3d701e21476e-8"&gt;&lt;/a&gt;
&lt;a name="rest_code_263faeaff61345929d2c3d701e21476e-9"&gt;&lt;/a&gt;    &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;$pwd&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
&lt;a name="rest_code_263faeaff61345929d2c3d701e21476e-10"&gt;&lt;/a&gt;        &lt;span class="nb"&gt;Set-Location&lt;/span&gt; &lt;span class="nv"&gt;$pwd&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;a name="rest_code_263faeaff61345929d2c3d701e21476e-11"&gt;&lt;/a&gt;    &lt;span class="p"&gt;}&lt;/span&gt;
&lt;a name="rest_code_263faeaff61345929d2c3d701e21476e-12"&gt;&lt;/a&gt;    &lt;span class="nb"&gt;Set-Variable&lt;/span&gt; &lt;span class="n"&gt;-Name&lt;/span&gt; &lt;span class="n"&gt;OLDPWD&lt;/span&gt; &lt;span class="n"&gt;-Value&lt;/span&gt; &lt;span class="nv"&gt;$tmp&lt;/span&gt; &lt;span class="n"&gt;-Scope&lt;/span&gt; &lt;span class="n"&gt;global&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;a name="rest_code_263faeaff61345929d2c3d701e21476e-13"&gt;&lt;/a&gt;&lt;span class="p"&gt;}&lt;/span&gt;
&lt;a name="rest_code_263faeaff61345929d2c3d701e21476e-14"&gt;&lt;/a&gt;
&lt;a name="rest_code_263faeaff61345929d2c3d701e21476e-15"&gt;&lt;/a&gt;&lt;span class="nb"&gt;Set-Alias&lt;/span&gt; &lt;span class="n"&gt;-Name&lt;/span&gt; &lt;span class="nb"&gt;cd &lt;/span&gt;&lt;span class="n"&gt;-value&lt;/span&gt; &lt;span class="n"&gt;cddash&lt;/span&gt; &lt;span class="n"&gt;-Option&lt;/span&gt; &lt;span class="n"&gt;AllScope&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;div class="section" id="boost-startup-speed"&gt;
&lt;h3&gt;Boost startup speed&lt;/h3&gt;
&lt;p&gt;If you feel it takes a lot of time to start a PowerShell session due to your
profile script, I found running the following (I saved it as &lt;code class="docutils literal"&gt;ngen.ps1&lt;/code&gt;) in an
elevated PowerShell helps a lot.&lt;/p&gt;
&lt;pre class="code powershell"&gt;&lt;a name="rest_code_33a25e4132b94e18b2d1c26ca2d0f46d-1"&gt;&lt;/a&gt;&lt;span class="nv"&gt;$env:path&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="no"&gt;[Runtime.InteropServices.RuntimeEnvironment]&lt;/span&gt;&lt;span class="p"&gt;::&lt;/span&gt;&lt;span class="n"&gt;GetRuntimeDirectory&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;a name="rest_code_33a25e4132b94e18b2d1c26ca2d0f46d-2"&gt;&lt;/a&gt;&lt;span class="no"&gt;[AppDomain]&lt;/span&gt;&lt;span class="p"&gt;::&lt;/span&gt;&lt;span class="n"&gt;CurrentDomain&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;GetAssemblies&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;|&lt;/span&gt; &lt;span class="p"&gt;%&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
&lt;a name="rest_code_33a25e4132b94e18b2d1c26ca2d0f46d-3"&gt;&lt;/a&gt;  &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(!&lt;/span&gt; &lt;span class="nv"&gt;$_&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;location&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="k"&gt;continue&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;
&lt;a name="rest_code_33a25e4132b94e18b2d1c26ca2d0f46d-4"&gt;&lt;/a&gt;  &lt;span class="nv"&gt;$Name&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;Split-Path&lt;/span&gt; &lt;span class="nv"&gt;$_&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;location&lt;/span&gt; &lt;span class="n"&gt;-leaf&lt;/span&gt;
&lt;a name="rest_code_33a25e4132b94e18b2d1c26ca2d0f46d-5"&gt;&lt;/a&gt;  &lt;span class="nb"&gt;Write-Host&lt;/span&gt; &lt;span class="n"&gt;-ForegroundColor&lt;/span&gt; &lt;span class="n"&gt;Yellow&lt;/span&gt; &lt;span class="s2"&gt;"NGENing : $Name"&lt;/span&gt;
&lt;a name="rest_code_33a25e4132b94e18b2d1c26ca2d0f46d-6"&gt;&lt;/a&gt;  &lt;span class="n"&gt;ngen&lt;/span&gt; &lt;span class="n"&gt;install&lt;/span&gt; &lt;span class="nv"&gt;$_&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;location&lt;/span&gt; &lt;span class="p"&gt;|&lt;/span&gt; &lt;span class="p"&gt;%&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="s2"&gt;"&lt;/span&gt;&lt;span class="se"&gt;`t&lt;/span&gt;&lt;span class="s2"&gt;$_"&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;
&lt;a name="rest_code_33a25e4132b94e18b2d1c26ca2d0f46d-7"&gt;&lt;/a&gt;&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;p&gt;Source: &lt;a class="reference external" href="http://stackoverflow.com/questions/4208694/"&gt;http://stackoverflow.com/questions/4208694/&lt;/a&gt;.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class="section" id="changelog"&gt;
&lt;h2&gt;Changelog&lt;/h2&gt;
&lt;dl class="simple"&gt;
&lt;dt&gt;[2020-03-01 Sun]&lt;/dt&gt;
&lt;dd&gt;&lt;ul class="simple"&gt;
&lt;li&gt;&lt;p&gt;Add a note that current prompt customization is for &lt;code class="docutils literal"&gt;&lt;span class="pre"&gt;posh-git&lt;/span&gt;&lt;/code&gt; version 0.7.x.&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/dd&gt;
&lt;dt&gt;[2017-04-22 Sat]&lt;/dt&gt;
&lt;dd&gt;&lt;ul class="simple"&gt;
&lt;li&gt;&lt;p&gt;Update prompt customization script for the latest version of &lt;code class="docutils literal"&gt;&lt;span class="pre"&gt;posh-git&lt;/span&gt;&lt;/code&gt;
(0.7.2)&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Update &lt;code class="docutils literal"&gt;&lt;span class="pre"&gt;Git-ChildItemColor&lt;/span&gt;&lt;/code&gt; related information&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/dd&gt;
&lt;dt&gt;[2017-01-03 Tue]&lt;/dt&gt;
&lt;dd&gt;&lt;ul class="simple"&gt;
&lt;li&gt;&lt;p&gt;Update prompt customization script for the latest version of &lt;code class="docutils literal"&gt;&lt;span class="pre"&gt;posh-git&lt;/span&gt;&lt;/code&gt;&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/dd&gt;
&lt;/dl&gt;
&lt;/div&gt;&lt;/div&gt;</description><category>git</category><category>posh</category><category>PowerShell</category><category>settings</category><category>windows</category><guid>http://joonro.github.io/blog/posts/powershell-customizations/</guid><pubDate>Sun, 01 Mar 2020 22:00:00 GMT</pubDate></item><item><title>Syntax highlighting in LaTeX export in org-mode: specifying outputdir option for minted package</title><link>http://joonro.github.io/blog/posts/org-mode-outputdir-minted-latex-export/</link><dc:creator>Joon Ro</dc:creator><description>&lt;div&gt;&lt;p&gt;When you do LaTeX export in org-mode, you can get syntax highlighting in pdf
output using &lt;code class="docutils literal"&gt;minted&lt;/code&gt; package, which uses &lt;code class="docutils literal"&gt;pygments&lt;/code&gt;. You can add the following
in your &lt;code class="docutils literal"&gt;init&lt;/code&gt; file:&lt;/p&gt;
&lt;pre class="code common-lisp"&gt;&lt;a name="rest_code_e104301201874b0e9ba44e8b8f64bfaf-1"&gt;&lt;/a&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;require&lt;/span&gt; &lt;span class="ss"&gt;'ox-latex&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;a name="rest_code_e104301201874b0e9ba44e8b8f64bfaf-2"&gt;&lt;/a&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;add-to-list&lt;/span&gt; &lt;span class="ss"&gt;'org-latex-packages-alist&lt;/span&gt; &lt;span class="o"&gt;'&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;""&lt;/span&gt; &lt;span class="s"&gt;"minted"&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
&lt;a name="rest_code_e104301201874b0e9ba44e8b8f64bfaf-3"&gt;&lt;/a&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;setq&lt;/span&gt; &lt;span class="nv"&gt;org-latex-listings&lt;/span&gt; &lt;span class="ss"&gt;'minted&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;a name="rest_code_e104301201874b0e9ba44e8b8f64bfaf-4"&gt;&lt;/a&gt;
&lt;a name="rest_code_e104301201874b0e9ba44e8b8f64bfaf-5"&gt;&lt;/a&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;setq&lt;/span&gt; &lt;span class="nv"&gt;org-latex-pdf-process&lt;/span&gt;
&lt;a name="rest_code_e104301201874b0e9ba44e8b8f64bfaf-6"&gt;&lt;/a&gt;      &lt;span class="o"&gt;'&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"pdflatex -shell-escape -interaction nonstopmode -output-directory %o %f"&lt;/span&gt;
&lt;a name="rest_code_e104301201874b0e9ba44e8b8f64bfaf-7"&gt;&lt;/a&gt;        &lt;span class="s"&gt;"pdflatex -shell-escape -interaction nonstopmode -output-directory %o %f"&lt;/span&gt;
&lt;a name="rest_code_e104301201874b0e9ba44e8b8f64bfaf-8"&gt;&lt;/a&gt;        &lt;span class="s"&gt;"pdflatex -shell-escape -interaction nonstopmode -output-directory %o %f"&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
&lt;/pre&gt;&lt;p&gt;The problem with this is that if you want to export the document to a output
directory, (e.g., using &lt;code class="docutils literal"&gt;:EXPORT_FILE_NAME: ./Output/File_Name&lt;/code&gt; property),
then you will get the following error:&lt;/p&gt;
&lt;pre class="code tex"&gt;&lt;a name="rest_code_c24370d54e7643afb9ae5e4f38689ac0-1"&gt;&lt;/a&gt;! Package minted Error: Missing Pygments output; &lt;span class="k"&gt;\inputminted&lt;/span&gt; was
&lt;a name="rest_code_c24370d54e7643afb9ae5e4f38689ac0-2"&gt;&lt;/a&gt;probably given a file that does not exist--otherwise, you may need
&lt;a name="rest_code_c24370d54e7643afb9ae5e4f38689ac0-3"&gt;&lt;/a&gt;the outputdir package option, or may be using an incompatible build tool.
&lt;/pre&gt;&lt;p&gt;because &lt;code class="docutils literal"&gt;minted&lt;/code&gt; does not know where to find the intermediate file.&lt;/p&gt;
&lt;p&gt;My solution is first commenting out the &lt;code class="docutils literal"&gt;minted&lt;/code&gt; package part:&lt;/p&gt;
&lt;pre class="code common-lisp"&gt;&lt;a name="rest_code_a071dfd98f1d47f59ba21842866abf10-1"&gt;&lt;/a&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;require&lt;/span&gt; &lt;span class="ss"&gt;'ox-latex&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;a name="rest_code_a071dfd98f1d47f59ba21842866abf10-2"&gt;&lt;/a&gt;&lt;span class="c1"&gt;;(add-to-list 'org-latex-packages-alist '("" "minted"))&lt;/span&gt;
&lt;a name="rest_code_a071dfd98f1d47f59ba21842866abf10-3"&gt;&lt;/a&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;setq&lt;/span&gt; &lt;span class="nv"&gt;org-latex-listings&lt;/span&gt; &lt;span class="ss"&gt;'minted&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;a name="rest_code_a071dfd98f1d47f59ba21842866abf10-4"&gt;&lt;/a&gt;
&lt;a name="rest_code_a071dfd98f1d47f59ba21842866abf10-5"&gt;&lt;/a&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;setq&lt;/span&gt; &lt;span class="nv"&gt;org-latex-pdf-process&lt;/span&gt;
&lt;a name="rest_code_a071dfd98f1d47f59ba21842866abf10-6"&gt;&lt;/a&gt;      &lt;span class="o"&gt;'&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"pdflatex -shell-escape -interaction nonstopmode -output-directory %o %f"&lt;/span&gt;
&lt;a name="rest_code_a071dfd98f1d47f59ba21842866abf10-7"&gt;&lt;/a&gt;        &lt;span class="s"&gt;"pdflatex -shell-escape -interaction nonstopmode -output-directory %o %f"&lt;/span&gt;
&lt;a name="rest_code_a071dfd98f1d47f59ba21842866abf10-8"&gt;&lt;/a&gt;        &lt;span class="s"&gt;"pdflatex -shell-escape -interaction nonstopmode -output-directory %o %f"&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
&lt;/pre&gt;&lt;p&gt;and then manually load &lt;code class="docutils literal"&gt;minted&lt;/code&gt; package with specifying &lt;code class="docutils literal"&gt;outputdir&lt;/code&gt; option in the org file:&lt;/p&gt;
&lt;pre class="code text"&gt;&lt;a name="rest_code_958208ffa9dc43558bd538a8d302de9a-1"&gt;&lt;/a&gt;* Test
&lt;a name="rest_code_958208ffa9dc43558bd538a8d302de9a-2"&gt;&lt;/a&gt;:PROPERTIES:
&lt;a name="rest_code_958208ffa9dc43558bd538a8d302de9a-3"&gt;&lt;/a&gt;:EXPORT_FILE_NAME: Output/File_Name
&lt;a name="rest_code_958208ffa9dc43558bd538a8d302de9a-4"&gt;&lt;/a&gt;:EXPORT_LATEX_HEADER+: \usepackage[outputdir=Output]{minted}
&lt;a name="rest_code_958208ffa9dc43558bd538a8d302de9a-5"&gt;&lt;/a&gt;:END:
&lt;/pre&gt;&lt;p&gt;and it should work.&lt;/p&gt;
&lt;p&gt;Last, if you want to highlight &lt;code class="docutils literal"&gt;ipython&lt;/code&gt; block, you can add the following to
your &lt;code class="docutils literal"&gt;init&lt;/code&gt; file:&lt;/p&gt;
&lt;pre class="code common-lisp"&gt;&lt;a name="rest_code_9bf9322928a649a3bfb9dfcebcb78750-1"&gt;&lt;/a&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;add-to-list&lt;/span&gt; &lt;span class="ss"&gt;'org-latex-minted-langs&lt;/span&gt; &lt;span class="o"&gt;'&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;ipython&lt;/span&gt; &lt;span class="s"&gt;"python"&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;</description><category>export</category><category>latex</category><category>minted</category><category>org-mode</category><category>syntax highlighting</category><guid>http://joonro.github.io/blog/posts/org-mode-outputdir-minted-latex-export/</guid><pubDate>Sat, 18 Feb 2017 00:00:00 GMT</pubDate></item><item><title>Windows 10: How to Enable Dark mode in PowerShell</title><link>http://joonro.github.io/blog/posts/windows-10-enable-dark-mode-posh/</link><dc:creator>Joon Ro</dc:creator><description>&lt;div&gt;&lt;p&gt;With &lt;a class="reference external" href="https://blogs.windows.com/windowsexperience/2016/08/02/new-video-series-this-week-on-windows-highlights-windows-10-anniversary-update/"&gt;Windows 10 Anniversary Update&lt;/a&gt;, one can choose between the &lt;a class="reference external" href="https://blogs.windows.com/windowsexperience/2016/08/08/windows-10-tip-personalize-your-pc-by-enabling-the-dark-theme/"&gt;light and dark
modes&lt;/a&gt;. Here is a set of PowerShell commands to set this in case you want to automate
it. These are slightly modified commands from this &lt;a class="reference external" href="https://www.reddit.com/r/windows/comments/3f0n2u/windows_10_enable_dark_mode/"&gt;reddit&lt;/a&gt; post.&lt;/p&gt;
&lt;p&gt;To use the dark mode:&lt;/p&gt;
&lt;table class="codetable"&gt;&lt;tr&gt;&lt;td class="linenos"&gt;&lt;div class="linenodiv"&gt;&lt;pre&gt;&lt;a href="http://joonro.github.io/blog/posts/windows-10-enable-dark-mode-posh/#rest_code_10c42f90201a4d78a97076f0175e5460-0"&gt;0&lt;/a&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/td&gt;&lt;td class="code"&gt;&lt;pre class="code PowerShell"&gt;&lt;a name="rest_code_10c42f90201a4d78a97076f0175e5460-0"&gt;&lt;/a&gt;&lt;span class="nb"&gt;Set-ItemProperty&lt;/span&gt; &lt;span class="n"&gt;-Path&lt;/span&gt; &lt;span class="n"&gt;HKCU&lt;/span&gt;&lt;span class="err"&gt;:&lt;/span&gt;&lt;span class="p"&gt;\&lt;/span&gt;&lt;span class="n"&gt;SOFTWARE&lt;/span&gt;&lt;span class="p"&gt;\&lt;/span&gt;&lt;span class="n"&gt;Microsoft&lt;/span&gt;&lt;span class="p"&gt;\&lt;/span&gt;&lt;span class="n"&gt;Windows&lt;/span&gt;&lt;span class="p"&gt;\&lt;/span&gt;&lt;span class="n"&gt;CurrentVersion&lt;/span&gt;&lt;span class="p"&gt;\&lt;/span&gt;&lt;span class="n"&gt;Themes&lt;/span&gt;&lt;span class="p"&gt;\&lt;/span&gt;&lt;span class="n"&gt;Personalize&lt;/span&gt; &lt;span class="n"&gt;-Name&lt;/span&gt; &lt;span class="n"&gt;AppsUseLightTheme&lt;/span&gt; &lt;span class="n"&gt;-Value&lt;/span&gt; &lt;span class="n"&gt;0&lt;/span&gt;
&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;p&gt;To use the light mode:&lt;/p&gt;
&lt;table class="codetable"&gt;&lt;tr&gt;&lt;td class="linenos"&gt;&lt;div class="linenodiv"&gt;&lt;pre&gt;&lt;a href="http://joonro.github.io/blog/posts/windows-10-enable-dark-mode-posh/#rest_code_c5f53b485ba3466d871d772248ae2f66-0"&gt;0&lt;/a&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/td&gt;&lt;td class="code"&gt;&lt;pre class="code PowerShell"&gt;&lt;a name="rest_code_c5f53b485ba3466d871d772248ae2f66-0"&gt;&lt;/a&gt;&lt;span class="nb"&gt;Set-ItemProperty&lt;/span&gt; &lt;span class="n"&gt;-Path&lt;/span&gt; &lt;span class="n"&gt;HKCU&lt;/span&gt;&lt;span class="err"&gt;:&lt;/span&gt;&lt;span class="p"&gt;\&lt;/span&gt;&lt;span class="n"&gt;SOFTWARE&lt;/span&gt;&lt;span class="p"&gt;\&lt;/span&gt;&lt;span class="n"&gt;Microsoft&lt;/span&gt;&lt;span class="p"&gt;\&lt;/span&gt;&lt;span class="n"&gt;Windows&lt;/span&gt;&lt;span class="p"&gt;\&lt;/span&gt;&lt;span class="n"&gt;CurrentVersion&lt;/span&gt;&lt;span class="p"&gt;\&lt;/span&gt;&lt;span class="n"&gt;Themes&lt;/span&gt;&lt;span class="p"&gt;\&lt;/span&gt;&lt;span class="n"&gt;Personalize&lt;/span&gt; &lt;span class="n"&gt;-Name&lt;/span&gt; &lt;span class="n"&gt;AppsUseLightTheme&lt;/span&gt; &lt;span class="n"&gt;-Value&lt;/span&gt; &lt;span class="n"&gt;1&lt;/span&gt;
&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/div&gt;</description><category>dark</category><category>posh</category><category>PowerShell</category><category>settings</category><category>theme</category><category>windows</category><guid>http://joonro.github.io/blog/posts/windows-10-enable-dark-mode-posh/</guid><pubDate>Wed, 10 Feb 2016 22:00:00 GMT</pubDate></item><item><title>Lenovo Y50 UHD Laptop: Driver Recommendations and Troubleshooting Information</title><link>http://joonro.github.io/blog/posts/lenovo-y50-uhd-laptop-driver-troubleshooting/</link><dc:creator>Joon Ro</dc:creator><description>&lt;div&gt;&lt;p&gt;Lenovo Y50 UHD is a laptop with good specs (especially for the price), as it
has a high-end quad-core processor (i7-4700HQ, passmark &lt;a class="reference external" href="http://www.cpubenchmark.net/cpu.php?cpu=Intel+Core+i7-4700HQ+%40+2.40GHz"&gt;7750+&lt;/a&gt; ), 16GB Ram,
256GB SSD, UHD display (3840x2160), Nvidia Geforce GTX 860M GPU, etc. The
problem is that it suffers from many driver issues, making it unnecessarily
frustrating to use. At first I had several problems, but now my machine is
pretty reliable and stable, and I want to document driver recommendations and
troubleshooting information. I'm using Windows 10.&lt;/p&gt;
&lt;p&gt;I feel the most important things to take care of are the SSD lock-up issue and
the Nvidia driver. I will keep this post updated as we get more driver updates.&lt;/p&gt;
&lt;div class="section" id="ssd-lock-up"&gt;
&lt;h2&gt;SSD Lock-up&lt;/h2&gt;
&lt;p&gt;The system becomes not responsive for 30~ seconds, Task Manager shows 100% disk
usage, while no process is using the disk.&lt;/p&gt;
&lt;p&gt;The solution is using &lt;code class="docutils literal"&gt;Standard SATA AHCI Controller&lt;/code&gt; instead of intel's for
&lt;code class="docutils literal"&gt;IDE ATA/ATAPI controllers&lt;/code&gt; in &lt;code class="docutils literal"&gt;Device Manager&lt;/code&gt;.&lt;/p&gt;
&lt;ol class="arabic simple"&gt;
&lt;li&gt;&lt;p&gt;Right click on the &lt;code class="docutils literal"&gt;Intel(R) 8 Series Chipset Family SATA AHCI Controller&lt;/code&gt; and click on  &lt;code class="docutils literal"&gt;Update Driver Software ..&lt;/code&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Select &lt;code class="docutils literal"&gt;Browse my computer for driver software&lt;/code&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Select &lt;code class="docutils literal"&gt;Let me pick from a list of ...&lt;/code&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Choose and install &lt;code class="docutils literal"&gt;Standard SATA AHCI Controller&lt;/code&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Reboot&lt;/p&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;A major Windows 10 update will revert the driver back to the Intel's, so you
have to manually do this again if it happens.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="nvidia-driver-for-gtx-860m"&gt;
&lt;h2&gt;Nvidia Driver for GTX 860M&lt;/h2&gt;
&lt;p&gt;It seems GTX 860M suffers from driver issues more than other desktop GPU's. If
you install a wrong version of the driver, you will suffer from performance
issues, crashes, and even BOSDs. Please do not update Nvidia driver without
checking the web and make sure it does not have any problems.&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;&lt;p&gt;Current (2015/12/27) recommended driver version is &lt;a class="reference external" href="http://nvidia.custhelp.com/app/answers/detail/a_id/3812/~/geforce-hot-fix-driver-359.12"&gt;GeForce Hot Fix driver 359.12&lt;/a&gt;.
It is for GTX 860M, but it seems it fixes problems for 960M as
well. You can read about it at the following Nvidia forum thread:
&lt;a class="reference external" href="https://forums.geforce.com/default/topic/900924/geforce-drivers/geforce-hotfix-driver-359-12-for-geforce-860m-notebook-gpus-released-12-2-15-"&gt;GeForce Hotfix driver 359.12 for GeForce 860M notebook GPUs (Released 12/2/15)&lt;/a&gt;.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;The current version 361.43 seems to have less number of problems, but
&lt;a class="reference external" href="https://forums.geforce.com/default/topic/904579/geforce-drivers/official-361-43-game-ready-whql-display-driver-feedback-thread-12-21-15-/6/"&gt;people seem to have BOSDs&lt;/a&gt; with &lt;code class="docutils literal"&gt;Kernal_Security_Check_Failure&lt;/code&gt; error.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;The previously working version was 355.98. All drivers in between (358.50,
358.87, 358.91) will cause problems.&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div class="section" id="touchpad-loses-gestures-after-waking-up"&gt;
&lt;h2&gt;Touchpad loses gestures after waking up&lt;/h2&gt;
&lt;p&gt;Sometimes after waking up, the Synaptics touchpad will lose gestures such as
three-finger swipe. Albeit not a permanent fix, running the following batch file will
reset the touchpad and bring back gestures. (I saved it as
&lt;code class="docutils literal"&gt;synaptics_touchpad_reset.bat&lt;/code&gt;) and run it whenever it doesn't work.&lt;/p&gt;
&lt;pre class="code bat"&gt;&lt;a name="rest_code_369b818449224780b94cb35d96fbb6ca-1"&gt;&lt;/a&gt;taskkill -f -im syntpenh.exe
&lt;a name="rest_code_369b818449224780b94cb35d96fbb6ca-2"&gt;&lt;/a&gt;&lt;span class="k"&gt;cd&lt;/span&gt; C:\Program Files\Synaptics\SynTP
&lt;a name="rest_code_369b818449224780b94cb35d96fbb6ca-3"&gt;&lt;/a&gt;&lt;span class="k"&gt;start&lt;/span&gt; &lt;span class="s2"&gt;""&lt;/span&gt; &lt;span class="s2"&gt;"syntpenh.exe"&lt;/span&gt;
&lt;a name="rest_code_369b818449224780b94cb35d96fbb6ca-4"&gt;&lt;/a&gt;&lt;span class="k"&gt;exit&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;div class="section" id="enabling-touchpad-2-and-3-finger-tap"&gt;
&lt;h2&gt;Enabling Touchpad 2- and 3-finger tap&lt;/h2&gt;
&lt;p&gt;If you want to enable touchpad 2- and 3-finger tap - for example, 2-finger tap
for the right-click and 3-finger tap for the middle-click, you can follow the
instructions at &lt;a class="reference external" href="https://forums.lenovo.com/t5/Lenovo-P-Y-and-Z-series/Y580-touchpad-two-finger-tap-for-right-click-not-working/m-p/1025407#M86254"&gt;this thread&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;In sum, what you need to do is, hit windows key + x, select &lt;code class="docutils literal"&gt;run&lt;/code&gt;, enter
&lt;code class="docutils literal"&gt;regedit&lt;/code&gt; then hit enter, and on the left pane browse to the following
location:&lt;/p&gt;
&lt;p&gt;&lt;code class="docutils literal"&gt;&lt;span class="pre"&gt;HKEY_USERS\&amp;lt;SID&lt;/span&gt; name for your current &lt;span class="pre"&gt;user&amp;gt;\Software\Synaptics\SynTP\TouchPadPS2&lt;/span&gt;&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;Only issue for me was that I had two entries, &lt;code class="docutils literal"&gt;TouchPadSMB2cTM2334&lt;/code&gt; and
&lt;code class="docutils literal"&gt;TouchPadPS2TM2334&lt;/code&gt;, and &lt;code class="docutils literal"&gt;TouchPadSMB2cTM2334&lt;/code&gt; was the one that worked.&lt;/p&gt;
&lt;p&gt;Then, in the right pane, change values of according to the following:&lt;/p&gt;
&lt;dl class="simple"&gt;
&lt;dt&gt;2FingerTapAction&lt;/dt&gt;
&lt;dd&gt;&lt;p&gt;&lt;code class="docutils literal"&gt;2&lt;/code&gt; for right click, &lt;code class="docutils literal"&gt;4&lt;/code&gt; for middle click.&lt;/p&gt;
&lt;/dd&gt;
&lt;dt&gt;2FingerTapPluginID&lt;/dt&gt;
&lt;dd&gt;&lt;p&gt;clear any value it may have&lt;/p&gt;
&lt;/dd&gt;
&lt;dt&gt;3FingerTapAction&lt;/dt&gt;
&lt;dd&gt;&lt;p&gt;&lt;code class="docutils literal"&gt;2&lt;/code&gt; for right click, &lt;code class="docutils literal"&gt;4&lt;/code&gt; for middle click.&lt;/p&gt;
&lt;/dd&gt;
&lt;dt&gt;3FingerTapPluginID&lt;/dt&gt;
&lt;dd&gt;&lt;p&gt;clear any value it may have&lt;/p&gt;
&lt;/dd&gt;
&lt;dt&gt;3FingerTapPluginActionID&lt;/dt&gt;
&lt;dd&gt;&lt;p&gt;&lt;code class="docutils literal"&gt;0&lt;/code&gt;&lt;/p&gt;
&lt;/dd&gt;
&lt;/dl&gt;
&lt;p&gt;Reboot and the 2- and 3-finger taps will work.&lt;/p&gt;
&lt;/div&gt;&lt;/div&gt;</description><category>drivers</category><category>GTX 860M</category><category>lenovo</category><category>setting</category><category>troubleshooting</category><category>UHD</category><category>windows 10</category><category>y50</category><guid>http://joonro.github.io/blog/posts/lenovo-y50-uhd-laptop-driver-troubleshooting/</guid><pubDate>Sun, 27 Dec 2015 06:00:00 GMT</pubDate></item><item><title>Native desktop (toast) notifications for org-mode appointments in Windows</title><link>http://joonro.github.io/blog/posts/toast-notifications-org-mode-windows/</link><dc:creator>Joon Ro</dc:creator><description>&lt;div&gt;&lt;p&gt;I describe how to set up native desktop notifications (Toast notifications)
for org-mode appointments in Windows 8+.&lt;/p&gt;
&lt;div class="section" id="install-toast"&gt;
&lt;h2&gt;Install &lt;code class="docutils literal"&gt;toast&lt;/code&gt;&lt;/h2&gt;
&lt;p&gt;I use &lt;code class="docutils literal"&gt;toast.exe&lt;/code&gt; from toaster project: &lt;a class="reference external" href="https://github.com/nels-o/toaster"&gt;https://github.com/nels-o/toaster&lt;/a&gt;. You
can &lt;code class="docutils literal"&gt;git clone&lt;/code&gt; the whole repo which includes the executable:&lt;/p&gt;
&lt;pre class="code posh"&gt;&lt;a name="rest_code_df000de50c9245059d018ef75a71a2cd-1"&gt;&lt;/a&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;git&lt;/span&gt; &lt;span class="n"&gt;clone&lt;/span&gt; &lt;span class="n"&gt;https&lt;/span&gt;&lt;span class="err"&gt;:&lt;/span&gt;&lt;span class="p"&gt;//&lt;/span&gt;&lt;span class="n"&gt;github&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;com&lt;/span&gt;&lt;span class="p"&gt;/&lt;/span&gt;&lt;span class="n"&gt;nels-o&lt;/span&gt;&lt;span class="p"&gt;/&lt;/span&gt;&lt;span class="n"&gt;toaster&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;git&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;div class="section" id="emacs-settings"&gt;
&lt;h2&gt;Emacs Settings&lt;/h2&gt;
&lt;p&gt;The following is pretty much the same to
&lt;a class="reference external" href="https://lists.gnu.org/archive/html/emacs-orgmode/2013-02/msg00644.html"&gt;https://lists.gnu.org/archive/html/emacs-orgmode/2013-02/msg00644.html&lt;/a&gt;. You
can modify &lt;code class="docutils literal"&gt;&lt;span class="pre"&gt;appt-message-warning-time&lt;/span&gt;&lt;/code&gt; and &lt;code class="docutils literal"&gt;&lt;span class="pre"&gt;appt-display-interval&lt;/span&gt;&lt;/code&gt; to your need:&lt;/p&gt;
&lt;pre class="code scheme"&gt;&lt;a name="rest_code_6032247ff75d4da09177ebb1713ca127-1"&gt;&lt;/a&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nf"&gt;require&lt;/span&gt; &lt;span class="ss"&gt;'appt&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;a name="rest_code_6032247ff75d4da09177ebb1713ca127-2"&gt;&lt;/a&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nf"&gt;setq&lt;/span&gt; &lt;span class="nv"&gt;appt-time-msg-list&lt;/span&gt; &lt;span class="nv"&gt;nil&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;    &lt;span class="c1"&gt;;; clear existing appt list&lt;/span&gt;
&lt;a name="rest_code_6032247ff75d4da09177ebb1713ca127-3"&gt;&lt;/a&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nf"&gt;setq&lt;/span&gt; &lt;span class="nv"&gt;appt-display-interval&lt;/span&gt; &lt;span class="ss"&gt;'5&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;  &lt;span class="c1"&gt;;; warn every 5 minutes from t - appt-message-warning-time&lt;/span&gt;
&lt;a name="rest_code_6032247ff75d4da09177ebb1713ca127-4"&gt;&lt;/a&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nf"&gt;setq&lt;/span&gt;
&lt;a name="rest_code_6032247ff75d4da09177ebb1713ca127-5"&gt;&lt;/a&gt;  &lt;span class="nv"&gt;appt-message-warning-time&lt;/span&gt; &lt;span class="ss"&gt;'15&lt;/span&gt;  &lt;span class="c1"&gt;;; send first warning 15 minutes before appointment&lt;/span&gt;
&lt;a name="rest_code_6032247ff75d4da09177ebb1713ca127-6"&gt;&lt;/a&gt;  &lt;span class="nv"&gt;appt-display-mode-line&lt;/span&gt; &lt;span class="nv"&gt;nil&lt;/span&gt;     &lt;span class="c1"&gt;;; don't show in the modeline&lt;/span&gt;
&lt;a name="rest_code_6032247ff75d4da09177ebb1713ca127-7"&gt;&lt;/a&gt;  &lt;span class="nv"&gt;appt-display-format&lt;/span&gt; &lt;span class="ss"&gt;'window&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;   &lt;span class="c1"&gt;;; pass warnings to the designated window function&lt;/span&gt;
&lt;a name="rest_code_6032247ff75d4da09177ebb1713ca127-8"&gt;&lt;/a&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nf"&gt;appt-activate&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;                &lt;span class="c1"&gt;;; activate appointment notification&lt;/span&gt;
&lt;a name="rest_code_6032247ff75d4da09177ebb1713ca127-9"&gt;&lt;/a&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nf"&gt;display-time&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;                   &lt;span class="c1"&gt;;; activate time display&lt;/span&gt;
&lt;a name="rest_code_6032247ff75d4da09177ebb1713ca127-10"&gt;&lt;/a&gt;
&lt;a name="rest_code_6032247ff75d4da09177ebb1713ca127-11"&gt;&lt;/a&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nf"&gt;org-agenda-to-appt&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;             &lt;span class="c1"&gt;;; generate the appt list from org agenda files on emacs launch&lt;/span&gt;
&lt;a name="rest_code_6032247ff75d4da09177ebb1713ca127-12"&gt;&lt;/a&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nf"&gt;run-at-time&lt;/span&gt; &lt;span class="s"&gt;"24:01"&lt;/span&gt; &lt;span class="mi"&gt;3600&lt;/span&gt; &lt;span class="ss"&gt;'org-agenda-to-appt&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;           &lt;span class="c1"&gt;;; update appt list hourly&lt;/span&gt;
&lt;a name="rest_code_6032247ff75d4da09177ebb1713ca127-13"&gt;&lt;/a&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nf"&gt;add-hook&lt;/span&gt; &lt;span class="ss"&gt;'org-finalize-agenda-hook&lt;/span&gt; &lt;span class="ss"&gt;'org-agenda-to-appt&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="c1"&gt;;; update appt list on agenda view&lt;/span&gt;
&lt;/pre&gt;&lt;p&gt;Next, specify the path to your &lt;code class="docutils literal"&gt;toast&lt;/code&gt; executable (note that I'm using
UNIX-style path here, seems to be working well):&lt;/p&gt;
&lt;pre class="code scheme"&gt;&lt;a name="rest_code_96f21b710f67410d9806396335e1a5b3-1"&gt;&lt;/a&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nf"&gt;defvar&lt;/span&gt; &lt;span class="nv"&gt;toast-notifier-path&lt;/span&gt;
&lt;a name="rest_code_96f21b710f67410d9806396335e1a5b3-2"&gt;&lt;/a&gt;  &lt;span class="s"&gt;"/home/joon/Programs/toast/bin/Release/toast"&lt;/span&gt;
&lt;a name="rest_code_96f21b710f67410d9806396335e1a5b3-3"&gt;&lt;/a&gt;  &lt;span class="p"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;p&gt;Set up the call to &lt;code class="docutils literal"&gt;toast&lt;/code&gt;:&lt;/p&gt;
&lt;pre class="code scheme"&gt;&lt;a name="rest_code_7e95820699794e4fa604134d78a1f88c-1"&gt;&lt;/a&gt;&lt;span class="c1"&gt;;; set up the call to the notifier&lt;/span&gt;
&lt;a name="rest_code_7e95820699794e4fa604134d78a1f88c-2"&gt;&lt;/a&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nf"&gt;defun&lt;/span&gt; &lt;span class="nv"&gt;toast-appt-send-notification&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nf"&gt;title&lt;/span&gt; &lt;span class="nv"&gt;msg&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;a name="rest_code_7e95820699794e4fa604134d78a1f88c-3"&gt;&lt;/a&gt;  &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nf"&gt;shell-command&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nf"&gt;concat&lt;/span&gt; &lt;span class="nv"&gt;toast-notifier-path&lt;/span&gt;
&lt;a name="rest_code_7e95820699794e4fa604134d78a1f88c-4"&gt;&lt;/a&gt;                         &lt;span class="s"&gt;" -t \""&lt;/span&gt; &lt;span class="nv"&gt;title&lt;/span&gt; &lt;span class="s"&gt;"\""&lt;/span&gt;
&lt;a name="rest_code_7e95820699794e4fa604134d78a1f88c-5"&gt;&lt;/a&gt;                         &lt;span class="s"&gt;" -m \""&lt;/span&gt; &lt;span class="nv"&gt;msg&lt;/span&gt; &lt;span class="s"&gt;"\""&lt;/span&gt;&lt;span class="p"&gt;)))&lt;/span&gt;
&lt;a name="rest_code_7e95820699794e4fa604134d78a1f88c-6"&gt;&lt;/a&gt;
&lt;a name="rest_code_7e95820699794e4fa604134d78a1f88c-7"&gt;&lt;/a&gt;&lt;span class="c1"&gt;;; designate the window function for my-appt-send-notification&lt;/span&gt;
&lt;a name="rest_code_7e95820699794e4fa604134d78a1f88c-8"&gt;&lt;/a&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nf"&gt;defun&lt;/span&gt; &lt;span class="nv"&gt;toast-appt-display&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nf"&gt;min-to-app&lt;/span&gt; &lt;span class="nv"&gt;new-time&lt;/span&gt; &lt;span class="nv"&gt;msg&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;a name="rest_code_7e95820699794e4fa604134d78a1f88c-9"&gt;&lt;/a&gt;  &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nf"&gt;toast-appt-send-notification&lt;/span&gt;
&lt;a name="rest_code_7e95820699794e4fa604134d78a1f88c-10"&gt;&lt;/a&gt;    &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nf"&gt;format&lt;/span&gt; &lt;span class="s"&gt;"Appointment in %s minutes"&lt;/span&gt; &lt;span class="nv"&gt;min-to-app&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;    &lt;span class="c1"&gt;;; passed to -t in toast call&lt;/span&gt;
&lt;a name="rest_code_7e95820699794e4fa604134d78a1f88c-11"&gt;&lt;/a&gt;    &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nf"&gt;format&lt;/span&gt; &lt;span class="s"&gt;"%s"&lt;/span&gt; &lt;span class="nv"&gt;msg&lt;/span&gt;&lt;span class="p"&gt;)))&lt;/span&gt;                                &lt;span class="c1"&gt;;; passed to -m in toast call&lt;/span&gt;
&lt;a name="rest_code_7e95820699794e4fa604134d78a1f88c-12"&gt;&lt;/a&gt;
&lt;a name="rest_code_7e95820699794e4fa604134d78a1f88c-13"&gt;&lt;/a&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nf"&gt;setq&lt;/span&gt; &lt;span class="nv"&gt;appt-disp-window-function&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nf"&gt;function&lt;/span&gt; &lt;span class="nv"&gt;toast-appt-display&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
&lt;/pre&gt;&lt;p&gt;Now Emacs will use &lt;code class="docutils literal"&gt;toast&lt;/code&gt; to notify you of upcoming appointments:&lt;/p&gt;
&lt;img alt="../images/toast_example.png" src="http://joonro.github.io/blog/posts/images/toast_example.png"&gt;
&lt;p&gt;If you want to be fancier, you can show an icon in the notification as
well. You can download an icon (from
&lt;a class="reference external" href="http://www.easyicon.net/language.en/540985-org_mode_icon.html"&gt;http://www.easyicon.net/language.en/540985-org_mode_icon.html&lt;/a&gt;, for example)
and modify &lt;code class="docutils literal"&gt;&lt;span class="pre"&gt;toast-appt-send-notification&lt;/span&gt;&lt;/code&gt; by adding &lt;code class="docutils literal"&gt;&lt;span class="pre"&gt;-p&lt;/span&gt;&lt;/code&gt; argument (you have
to use Windows-style path here):&lt;/p&gt;
&lt;pre class="code scheme"&gt;&lt;a name="rest_code_96bb8586851b421c8d28c1f1b5d62f1b-1"&gt;&lt;/a&gt;&lt;span class="c1"&gt;;; set up the call to the notifier&lt;/span&gt;
&lt;a name="rest_code_96bb8586851b421c8d28c1f1b5d62f1b-2"&gt;&lt;/a&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nf"&gt;defun&lt;/span&gt; &lt;span class="nv"&gt;toast-appt-send-notification&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nf"&gt;title&lt;/span&gt; &lt;span class="nv"&gt;msg&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;a name="rest_code_96bb8586851b421c8d28c1f1b5d62f1b-3"&gt;&lt;/a&gt;  &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nf"&gt;shell-command&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nf"&gt;concat&lt;/span&gt; &lt;span class="nv"&gt;toast-notifier-path&lt;/span&gt;
&lt;a name="rest_code_96bb8586851b421c8d28c1f1b5d62f1b-4"&gt;&lt;/a&gt;                         &lt;span class="s"&gt;" -t \""&lt;/span&gt; &lt;span class="nv"&gt;title&lt;/span&gt; &lt;span class="s"&gt;"\""&lt;/span&gt;
&lt;a name="rest_code_96bb8586851b421c8d28c1f1b5d62f1b-5"&gt;&lt;/a&gt;                         &lt;span class="s"&gt;" -m \""&lt;/span&gt; &lt;span class="nv"&gt;msg&lt;/span&gt; &lt;span class="s"&gt;"\""&lt;/span&gt;
&lt;a name="rest_code_96bb8586851b421c8d28c1f1b5d62f1b-6"&gt;&lt;/a&gt;                         &lt;span class="s"&gt;" -p C:\\Users\\joon\\Programs\\Assets\\Icons\\org_mode_256px_540985_easyicon.net.png"&lt;/span&gt;&lt;span class="p"&gt;)))&lt;/span&gt;
&lt;/pre&gt;&lt;p&gt;which makes notifications look very nice:&lt;/p&gt;
&lt;img alt="../images/toast_example_with_icon.png" src="http://joonro.github.io/blog/posts/images/toast_example_with_icon.png"&gt;
&lt;/div&gt;&lt;/div&gt;</description><category>emacs</category><category>howto</category><category>org-mode</category><category>setting</category><category>toast</category><category>windows</category><guid>http://joonro.github.io/blog/posts/toast-notifications-org-mode-windows/</guid><pubDate>Sat, 26 Dec 2015 06:00:00 GMT</pubDate></item><item><title>How to set up inverse and forward search in LyX for Windows</title><link>http://joonro.github.io/blog/posts/inverse-and-forward-search-lyx-windows/</link><dc:creator>Joon Ro</dc:creator><description>&lt;div&gt;&lt;p&gt;I describe how to set up &lt;a class="reference external" href="https://en.wikipedia.org/wiki/Inverse_search"&gt;inverse&lt;/a&gt; and forward search in LyX for the Windows
environment, with &lt;a class="reference external" href="http://www.sumatrapdfreader.org/free-pdf-reader.html"&gt;SumatraPDF&lt;/a&gt; as the pdf viewer. Inverse search lets you
quickly move to the corresponding part of a LyX (or LaTeX) source from its pdf
output, typically by clicking on the text in the pdf viewer. Forward search
works in the opposite direction; from the LyX (or LaTeX) source, you can
invoke forward search to make the pdf viewer scroll through the pdf document
so the output counterpart of the source is shown. They are very useful
especially when you are editing a long document. Most of the instructions
overlap with those found at &lt;a class="reference external" href="http://wiki.lyx.org/LyX/SyncTeX#toc3"&gt;http://wiki.lyx.org/LyX/SyncTeX#toc3&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;&lt;a href="http://joonro.github.io/blog/posts/inverse-and-forward-search-lyx-windows/"&gt; click to read the rest of the article …&lt;/a&gt; (2 min remaining to read)&lt;/p&gt;&lt;/div&gt;</description><category>autohotkey</category><category>howto</category><category>latex</category><category>lyx</category><category>setting</category><category>windows</category><guid>http://joonro.github.io/blog/posts/inverse-and-forward-search-lyx-windows/</guid><pubDate>Sat, 10 Oct 2015 05:00:00 GMT</pubDate></item><item><title>Installing GNU Scientific Library (GSL) and CythonGSL in Windows</title><link>http://joonro.github.io/blog/posts/installing-gsl-and-cythongsl-in-windows/</link><dc:creator>Joon Ro</dc:creator><description>&lt;div&gt;&lt;div id="table-of-contents"&gt;
&lt;h3&gt;Table of Contents&lt;/h3&gt;
&lt;div id="text-table-of-contents"&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="http://joonro.github.io/blog/posts/installing-gsl-and-cythongsl-in-windows/#orgheadline3"&gt;1. Download&lt;/a&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="http://joonro.github.io/blog/posts/installing-gsl-and-cythongsl-in-windows/#orgheadline1"&gt;1.1. GSL&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="http://joonro.github.io/blog/posts/installing-gsl-and-cythongsl-in-windows/#orgheadline2"&gt;1.2. CythonGSL&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href="http://joonro.github.io/blog/posts/installing-gsl-and-cythongsl-in-windows/#orgheadline4"&gt;2. Installing GSL&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="http://joonro.github.io/blog/posts/installing-gsl-and-cythongsl-in-windows/#orgheadline7"&gt;3. Environmental Variables&lt;/a&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="http://joonro.github.io/blog/posts/installing-gsl-and-cythongsl-in-windows/#orgheadline5"&gt;3.1. &lt;code&gt;LIB_GSL&lt;/code&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="http://joonro.github.io/blog/posts/installing-gsl-and-cythongsl-in-windows/#orgheadline6"&gt;3.2. &lt;code&gt;PATH&lt;/code&gt;&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href="http://joonro.github.io/blog/posts/installing-gsl-and-cythongsl-in-windows/#orgheadline8"&gt;4. Installing CythonGSL&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;/div&gt;

&lt;p&gt;
I describe how to install GNU Scientific Library (GSL) for CythonGSL in
Windows.
&lt;/p&gt;

&lt;p&gt;
&lt;a href="https://github.com/twiecki/CythonGSL"&gt;CythonGSL&lt;/a&gt; is a great module which expose functions of GNU Scientific Library
(GSL) to Cython so you can use them in your Cython extension modules
conveniently.
&lt;/p&gt;

&lt;p&gt;
In GNU/Linux, you can install GSL library with development header files with a
one liner (for example, &lt;code&gt;$ sudo zypper install gsl-devel&lt;/code&gt; in &lt;a href="https://www.opensuse.org/"&gt;openSUSE&lt;/a&gt;), but in
Windows it is a bit more involved, and if you are not familiar with these kind
of stuff (like me) it can take hours to figure out what is wrong. I hope this
post will save some time for others.
&lt;/p&gt;

&lt;p&gt;
In sum, you need to do 1) download and unpack GSL with header files and right
architecture, 2) set &lt;code&gt;LIB_GSL&lt;/code&gt; environmental variable to the GSL directory,
and 3) add the path to the &lt;code&gt;bin&lt;/code&gt; subdirectory of the GSL directory to &lt;code&gt;PATH&lt;/code&gt;
environmental variable.
&lt;/p&gt;

&lt;div id="outline-container-orgheadline3" class="outline-2"&gt;
&lt;h3 id="orgheadline3"&gt;&lt;span class="section-number-2"&gt;1&lt;/span&gt; Download&lt;/h3&gt;
&lt;div class="outline-text-2" id="text-1"&gt;
&lt;/div&gt;&lt;div id="outline-container-orgheadline1" class="outline-3"&gt;
&lt;h4 id="orgheadline1"&gt;&lt;span class="section-number-3"&gt;1.1&lt;/span&gt; GSL&lt;/h4&gt;
&lt;div class="outline-text-3" id="text-1-1"&gt;
&lt;p&gt;
&lt;a href="https://code.google.com/p/oscats/downloads/list"&gt;oscats&lt;/a&gt; project has the latest GSL Windows DLL and headers for both 32 and
64-bit. Make sure you download the one for the right architecture (the same
one as your Python installation). For example, &lt;code&gt;gsl-1.15-dev-win64.zip&lt;/code&gt; for
the 64-bit.
&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div id="outline-container-orgheadline2" class="outline-3"&gt;
&lt;h4 id="orgheadline2"&gt;&lt;span class="section-number-3"&gt;1.2&lt;/span&gt; CythonGSL&lt;/h4&gt;
&lt;div class="outline-text-3" id="text-1-2"&gt;
&lt;p&gt;
If you use git, you can download CythonGSL with &lt;code&gt;git clone&lt;/code&gt;:
&lt;/p&gt;

&lt;div class="org-src-container"&gt;


&lt;pre&gt;&lt;code class="lang-shell"&gt;git clone git://github.com/twiecki/CythonGSL.git
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;

&lt;p&gt;
or you can just download the &lt;a href="https://github.com/twiecki/CythonGSL/archive/master.zip"&gt;zip archive&lt;/a&gt; of the master branch.
&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;

&lt;div id="outline-container-orgheadline4" class="outline-2"&gt;
&lt;h3 id="orgheadline4"&gt;&lt;span class="section-number-2"&gt;2&lt;/span&gt; Installing GSL&lt;/h3&gt;
&lt;div class="outline-text-2" id="text-2"&gt;
&lt;p&gt;
Just extract the downloaded file to your preferred location such as
&lt;code&gt;C:\lib64\GSL&lt;/code&gt; or &lt;code&gt;C:\Users\YourName\lib\GSL&lt;/code&gt;. In general it is good idea to
not have any spaces in the path. From now on I will assume that you have
extracted the archive file into &lt;code&gt;C:\lib64\GSL&lt;/code&gt;, so if you extract it into
different location, change the path accordingly when you follow the
instructions below.
&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;

&lt;div id="outline-container-orgheadline7" class="outline-2"&gt;
&lt;h3 id="orgheadline7"&gt;&lt;span class="section-number-2"&gt;3&lt;/span&gt; Environmental Variables&lt;/h3&gt;
&lt;div class="outline-text-2" id="text-3"&gt;
&lt;p&gt;
You need to add an environmental variable &lt;code&gt;LIB_GSL&lt;/code&gt; and also add the path of
&lt;code&gt;\bin&lt;/code&gt; subdirectory of your GSL installation to your &lt;code&gt;PATH&lt;/code&gt; Environmental
variable.
&lt;/p&gt;
&lt;/div&gt;
&lt;div id="outline-container-orgheadline5" class="outline-3"&gt;
&lt;h4 id="orgheadline5"&gt;&lt;span class="section-number-3"&gt;3.1&lt;/span&gt; &lt;code&gt;LIB_GSL&lt;/code&gt;&lt;/h4&gt;
&lt;div class="outline-text-3" id="text-3-1"&gt;
&lt;p&gt;
Create an environmental variable &lt;code&gt;LIB_GSL&lt;/code&gt; with the path to your GSL
installation. It is recommended to use Unix style path separator, &lt;code&gt;/&lt;/code&gt;
instead of &lt;code&gt;\&lt;/code&gt; for this:
&lt;/p&gt;

&lt;div class="org-src-container"&gt;


&lt;pre&gt;&lt;code class="lang-sh"&gt;LIB_GSL=C:/lib64/GSL
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div id="outline-container-orgheadline6" class="outline-3"&gt;
&lt;h4 id="orgheadline6"&gt;&lt;span class="section-number-3"&gt;3.2&lt;/span&gt; &lt;code&gt;PATH&lt;/code&gt;&lt;/h4&gt;
&lt;div class="outline-text-3" id="text-3-2"&gt;
&lt;p&gt;
Add &lt;code&gt;C:\GSL\bin&lt;/code&gt; to your &lt;code&gt;PATH&lt;/code&gt; environmental variable. This is so Windows can
find the two DLL files, &lt;code&gt;libgsl-0.dll&lt;/code&gt; and &lt;code&gt;libgslcblas-0.dll&lt;/code&gt;. Otherwise,
your Cython code will compile, but it will raise the following error at
runtime:
&lt;/p&gt;

&lt;div class="org-src-container"&gt;


&lt;pre&gt;&lt;code class="lang-python"&gt;ImportError: DLL load failed: The specified module could not be found.
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;

&lt;div id="outline-container-orgheadline8" class="outline-2"&gt;
&lt;h3 id="orgheadline8"&gt;&lt;span class="section-number-2"&gt;4&lt;/span&gt; Installing CythonGSL&lt;/h3&gt;
&lt;div class="outline-text-2" id="text-4"&gt;
&lt;p&gt;
If you have done &lt;code&gt;git clone&lt;/code&gt; then just &lt;code&gt;cd CythonGSL&lt;/code&gt; and if you have downloaded
&lt;code&gt;.zip&lt;/code&gt; archive, extract it and go to the directory. Then, following the
official instructions,
&lt;/p&gt;

&lt;div class="org-src-container"&gt;


&lt;pre&gt;&lt;code class="lang-sh"&gt;python setup.py build
python setup.py install
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;/div&gt;</description><category>cython</category><category>gsl</category><category>python</category><category>windows</category><guid>http://joonro.github.io/blog/posts/installing-gsl-and-cythongsl-in-windows/</guid><pubDate>Mon, 25 May 2015 05:50:11 GMT</pubDate></item><item><title>org-mode Google calendar sync in Windows</title><link>http://joonro.github.io/blog/posts/org-mode-google-calendar-sync-in-windows/</link><dc:creator>Joon Ro</dc:creator><description>&lt;div&gt;&lt;div id="table-of-contents"&gt;
&lt;h3&gt;Table of Contents&lt;/h3&gt;
&lt;div id="text-table-of-contents"&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="http://joonro.github.io/blog/posts/org-mode-google-calendar-sync-in-windows/#orgheadline3"&gt;1. Dependencies&lt;/a&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="http://joonro.github.io/blog/posts/org-mode-google-calendar-sync-in-windows/#orgheadline1"&gt;1.1. &lt;code&gt;ical2org.py&lt;/code&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="http://joonro.github.io/blog/posts/org-mode-google-calendar-sync-in-windows/#orgheadline2"&gt;1.2. Find your private URL for your calendar&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href="http://joonro.github.io/blog/posts/org-mode-google-calendar-sync-in-windows/#orgheadline4"&gt;2. PowerShell script&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="http://joonro.github.io/blog/posts/org-mode-google-calendar-sync-in-windows/#orgheadline5"&gt;3. Install cron&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;/div&gt;

&lt;p&gt;
The &lt;a href="http://orgmode.org/worg/org-tutorials/org-google-sync.html"&gt;instructions&lt;/a&gt; at Org-mode does not cover the Windows case. I explain how
you can get the sync between Google calendar and org-mode in Windows.
&lt;/p&gt;

&lt;div id="outline-container-orgheadline3" class="outline-2"&gt;
&lt;h3 id="orgheadline3"&gt;&lt;span class="section-number-2"&gt;1&lt;/span&gt; Dependencies&lt;/h3&gt;
&lt;div class="outline-text-2" id="text-1"&gt;
&lt;/div&gt;&lt;div id="outline-container-orgheadline1" class="outline-3"&gt;
&lt;h4 id="orgheadline1"&gt;&lt;span class="section-number-3"&gt;1.1&lt;/span&gt; &lt;code&gt;ical2org.py&lt;/code&gt;&lt;/h4&gt;
&lt;div class="outline-text-3" id="text-1-1"&gt;
&lt;p&gt;
Get the &lt;code&gt;ical2org.py&lt;/code&gt; script from &lt;a href="https://github.com/asoroa/ical2org.py"&gt;https://github.com/asoroa/ical2org.py&lt;/a&gt;. You
have to have Python installed, and also need to install &lt;code&gt;icalendar&lt;/code&gt; and &lt;code&gt;pytz&lt;/code&gt;:
&lt;/p&gt;

&lt;div class="org-src-container"&gt;


&lt;pre&gt;&lt;code class="lang-sh"&gt;&amp;gt; pip install icalendar
&amp;gt; pip install pytz
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;

&lt;div id="outline-container-orgheadline2" class="outline-3"&gt;
&lt;h4 id="orgheadline2"&gt;&lt;span class="section-number-3"&gt;1.2&lt;/span&gt; Find your private URL for your calendar&lt;/h4&gt;
&lt;div class="outline-text-3" id="text-1-2"&gt;
&lt;p&gt;
Follow step 2 in this &lt;a href="http://orgmode.org/worg/org-tutorials/org-google-sync.html"&gt;instruction&lt;/a&gt; to get the private URL for your calendar.
&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;

&lt;div id="outline-container-orgheadline4" class="outline-2"&gt;
&lt;h3 id="orgheadline4"&gt;&lt;span class="section-number-2"&gt;2&lt;/span&gt; PowerShell script&lt;/h3&gt;
&lt;div class="outline-text-2" id="text-2"&gt;
&lt;p&gt;
First check if you can download your calendar with &lt;code&gt;Invoke-WebRequest&lt;/code&gt;:
&lt;/p&gt;

&lt;div class="org-src-container"&gt;


&lt;pre&gt;&lt;code class="lang-posh"&gt;&amp;gt; Invoke-WebRequest -URI &amp;lt;url to your private Google calendar&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;

&lt;p&gt;
If it works, make a PowerShell script file,  &lt;code&gt;convert-gcal-to-org.ps1&lt;/code&gt;:
&lt;/p&gt;

&lt;div class="org-src-container"&gt;


&lt;pre&gt;&lt;code class="lang-posh"&gt;# customize these
$ICS2ORG = "&amp;lt;path to ical2org.py&amp;gt;"
$ICSFILE = "&amp;lt;path for icsfile&amp;gt;"
$ORGFILE = "&amp;lt;path to orgfile&amp;gt;"
$URL = "&amp;lt;url to your private Google calendar&amp;gt;"

# no customization needed below
$Content = (Invoke-WebRequest -URI $URL).Content
[System.IO.File]::WriteAllLines($ICSFILE, $Content)

python $ICS2ORG $ICSFILE $ORGFILE
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;

&lt;p&gt;
for example:
&lt;/p&gt;

&lt;div class="org-src-container"&gt;


&lt;pre&gt;&lt;code class="lang-posh"&gt;# customize these    
$ICS2ORG = "~/bin/ical2org.py"
$ICSFILE = "~/bin/gcal-shared.ical"
$ORGFILE = "~/gcal.org"
$URL = "https://www.google.com/calendar/ical/...../basic.ics"

# no customization needed below
$Content = (Invoke-WebRequest -URI $URL).Content
[System.IO.File]::WriteAllLines($ICSFILE, $Content) 

python $ICS2ORG $ICSFILE $ORGFILE
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;

&lt;p&gt;
Now try the script and see if it works:
&lt;/p&gt;

&lt;div class="org-src-container"&gt;


&lt;pre&gt;&lt;code class="lang-posh"&gt;&amp;gt; convert-gcal-to-org.ps1
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;

&lt;p&gt;
If you have the output &lt;code&gt;org&lt;/code&gt; file in your &lt;code&gt;org-agenda-files&lt;/code&gt; list, you will
see the entries from Google calendar when you update your agenda in Emacs.
&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;

&lt;div id="outline-container-orgheadline5" class="outline-2"&gt;
&lt;h3 id="orgheadline5"&gt;&lt;span class="section-number-2"&gt;3&lt;/span&gt; Install cron&lt;/h3&gt;
&lt;div class="outline-text-2" id="text-3"&gt;
&lt;p&gt;
You can install &lt;a href="http://www.intelliadmin.com/index.php/2012/05/free-utility-a-simple-task-scheduler-for-windows/"&gt;IntelliAdmin Cron&lt;/a&gt; to periodically run the script and sync your
calendars with &lt;code&gt;org-mode&lt;/code&gt;. &lt;a href="http://thecrumb.com/2013/03/24/new-cron-for-windows/"&gt;Here&lt;/a&gt; is a blog post about this specific cron utility.
&lt;/p&gt;

&lt;p&gt;
Then, use the following to set up the cronjob, with appropriate schedule settings:
&lt;/p&gt;

&lt;dl class="org-dl"&gt;
&lt;dt&gt;EXE File&lt;/dt&gt;&lt;dd&gt;&lt;code&gt;C:\Windows\System32\WindowsPowerShell\v1.0\powershell.exe&lt;/code&gt;&lt;/dd&gt;
&lt;dt&gt;Arguments&lt;/dt&gt;&lt;dd&gt;&lt;code&gt;-file C:\PATH\TO\convert-gcal-to-org.ps1&lt;/code&gt;&lt;/dd&gt;
&lt;/dl&gt;

&lt;p&gt;
For example:
&lt;/p&gt;


&lt;div class="figure"&gt;
&lt;p&gt;&lt;img src="http://joonro.github.io/blog/wp-content/Capture-crontab-org-mode-google-sync.png" alt="Capture-crontab-org-mode-google-sync.png"&gt;
&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;/div&gt;</description><category>emacs</category><category>org</category><category>posh</category><category>windows</category><guid>http://joonro.github.io/blog/posts/org-mode-google-calendar-sync-in-windows/</guid><pubDate>Sat, 09 May 2015 20:27:18 GMT</pubDate></item><item><title>Changed the blog engine to nikola</title><link>http://joonro.github.io/blog/posts/changed-the-blog-engine-to-nikola/</link><dc:creator>Joon Ro</dc:creator><description>&lt;div&gt;&lt;div id="table-of-contents"&gt;
&lt;h3&gt;Table of Contents&lt;/h3&gt;
&lt;div id="text-table-of-contents"&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="http://joonro.github.io/blog/posts/changed-the-blog-engine-to-nikola/#orgheadline1"&gt;1. reStructuredText to org-mode&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="http://joonro.github.io/blog/posts/changed-the-blog-engine-to-nikola/#orgheadline2"&gt;2. nikola&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="http://joonro.github.io/blog/posts/changed-the-blog-engine-to-nikola/#orgheadline4"&gt;3. Setup&lt;/a&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="http://joonro.github.io/blog/posts/changed-the-blog-engine-to-nikola/#orgheadline3"&gt;3.1. Syntax Highlighting&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href="http://joonro.github.io/blog/posts/changed-the-blog-engine-to-nikola/#orgheadline5"&gt;4. How to use&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;/div&gt;

&lt;p&gt;
It has been a while since the last time I updated my blog. I changed my blogging
engine to &lt;a href="http://getnikola.com/"&gt;nikola&lt;/a&gt;. Now my tool chain for writing is more streamlined, hopefully
I post more frequently.
&lt;/p&gt;

&lt;div id="outline-container-orgheadline1" class="outline-2"&gt;
&lt;h3 id="orgheadline1"&gt;&lt;span class="section-number-2"&gt;1&lt;/span&gt; reStructuredText to org-mode&lt;/h3&gt;
&lt;div class="outline-text-2" id="text-1"&gt;
&lt;p&gt;
I do enjoy using one general tool for many tasks - I like having a consistent
environment for different tasks. For example, I chose Python (a general
purpose language) instead of domain specific languages such as R and MATLAB
for my programming needs.
&lt;/p&gt;

&lt;p&gt;
I have been looking for something like that for my writing as well, and since
I used Python a lot, reStructuredText was a good candidate. With
reStructuredText, I could generate output in multiple formats (html, pdf,
slides), and I like the grammar. 
&lt;/p&gt;

&lt;p&gt;
With reStructuredText, I started using Emacs more for writing. Emacs'
&lt;code&gt;rst-mode&lt;/code&gt; is very well done, and I have been using &lt;a href="http://orgmode.org/"&gt;org-mode&lt;/a&gt; for a while as
well, even though for a while I mainly used it for the TODO list management
and some outline generation only. 
&lt;/p&gt;

&lt;p&gt;
Then this year I started teaching, and I had multiple sections, and I started
looking for ways to minimize the redundancy in course contents files. For
example, syllabi for all sections of classes share many common parts and if I
maintain separate files for each class, I have to modify all the files
every time I make some changes on one of the common parts.
&lt;/p&gt;

&lt;p&gt;
So I started writing lecture slides in reStructuredText in org-mode, putting
reStructuredText code in code blocks and using &lt;code&gt;org-babel&lt;/code&gt; to tangle the
source code into output files. In that way, I just write the common parts
once, and I could include them in multiple files. For slide generation, I used
&lt;a href="http://docs.hieroglyph.io/en/latest/"&gt;hieroglyph&lt;/a&gt; package which was great. Also I liked that I can generate
document-style lecture note for distribution from the same source.
&lt;/p&gt;

&lt;p&gt;
But quickly I started feeling that putting reStructuredText code inside code
blocks cumbersome. In addition, I really missed the easy navigation of tree
structure of org-mode. So I looked for a way to just use org-mode to write
everything instead of putting reStructuredText code inside code-blocks. 
&lt;/p&gt;

&lt;p&gt;
Then I learned about &lt;code&gt;org-export&lt;/code&gt; which can export an org-mode document to
multiple output formats. Since then I started using org-mode to write my
course notes. I had to learn a few tricks and also install org 8.3beta, but
now the results has been very satisfactory. Now I write lecture note in
org-mode, , and use &lt;code&gt;ox-beamer&lt;/code&gt; to generate beamer slides for presentations,
and use &lt;code&gt;ox-latex&lt;/code&gt; to generate lecture notes from the same source. &lt;code&gt;org-mode&lt;/code&gt;
is just a pleasure to use. Now I believe I found the tool-chain for all my
writing needs: Emacs and &lt;code&gt;org-mode&lt;/code&gt;.
&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;

&lt;div id="outline-container-orgheadline2" class="outline-2"&gt;
&lt;h3 id="orgheadline2"&gt;&lt;span class="section-number-2"&gt;2&lt;/span&gt; nikola&lt;/h3&gt;
&lt;div class="outline-text-2" id="text-2"&gt;
&lt;p&gt;
Naturally I started searching for a blogging engine which enables me to use
org-mode. I have been using &lt;a href="http://tinkerer.me/"&gt;tinkerer&lt;/a&gt; for a while, and it is great, but there
are a couple of steps you have to go through to use org-mode to write
posts. Exporting a subtree to a &lt;code&gt;.rst&lt;/code&gt; file is easy, but there are some manual
steps involved - basically you have to add a new post to the sphinx index file
either by manually or by using tinkerer.
&lt;/p&gt;

&lt;p&gt;
Then I found &lt;a href="http://getnikola.com/"&gt;nikola&lt;/a&gt;. Unlike tinkerer, nikola automatically reads files in the
designated posts folder and generates index - so you don't have to manually
add anything to the index. In addition, there is a tool &lt;a href="https://github.com/redguardtoo/org2nikola"&gt;org2nikola&lt;/a&gt; which
generates a post from a org subtree, so I can put all my posts into one &lt;code&gt;.org&lt;/code&gt;
file.
&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;

&lt;div id="outline-container-orgheadline4" class="outline-2"&gt;
&lt;h3 id="orgheadline4"&gt;&lt;span class="section-number-2"&gt;3&lt;/span&gt; Setup&lt;/h3&gt;
&lt;div class="outline-text-2" id="text-3"&gt;
&lt;p&gt;
You need to add the &lt;code&gt;.wp&lt;/code&gt; file extensions to the &lt;code&gt;POSTS&lt;/code&gt; and &lt;code&gt;PAGES&lt;/code&gt; tuples,
and also to markdown compilers in your &lt;code&gt;conf.py&lt;/code&gt;:
&lt;/p&gt;

&lt;div class="org-src-container"&gt;


&lt;pre&gt;&lt;code class="lang-python"&gt;POSTS = (
    ("posts/*.rst", "posts", "post.tmpl"),
    ("posts/*.txt", "posts", "post.tmpl"),
    ("posts/*.wp", "posts", "post.tmpl"),
)
PAGES = (
    ("stories/*.rst", "stories", "story.tmpl"),
    ("stories/*.txt", "stories", "story.tmpl"),
    ("stories/*.wp", "stories", "story.tmpl"),
)
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;

&lt;div class="org-src-container"&gt;


&lt;pre&gt;&lt;code class="lang-python"&gt;COMPILERS = {
    "rest": ('.rst', '.txt'),
    "markdown": ('.md', '.mdown', '.markdown', '.wp'),
    "textile": ('.textile',),
    "txt2tags": ('.t2t',),
    "bbcode": ('.bb',),
    "wiki": ('.wiki',),
    "ipynb": ('.ipynb',),
    "html": ('.html', '.htm'),
    # PHP files are rendered the usual way (i.e. with the full templates).
    # The resulting files have .php extensions, making it possible to run
    # them without reconfiguring your server to recognize them.
    "php": ('.php',),
    # Pandoc detects the input from the source filename
    # but is disabled by default as it would conflict
    # with many of the others.
    # "pandoc": ('.rst', '.md', '.txt'),
}
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;
&lt;/div&gt;
&lt;div id="outline-container-orgheadline3" class="outline-3"&gt;
&lt;h4 id="orgheadline3"&gt;&lt;span class="section-number-3"&gt;3.1&lt;/span&gt; Syntax Highlighting&lt;/h4&gt;
&lt;div class="outline-text-3" id="text-3-1"&gt;
&lt;p&gt;
To use &lt;a href="https://highlightjs.org/"&gt;highlight.js&lt;/a&gt; for syntax highlighting, add a definition of &lt;code&gt;EXTRA_HEAD_DATA&lt;/code&gt;:
&lt;/p&gt;
&lt;div class="org-src-container"&gt;


&lt;pre&gt;&lt;code class="lang-python"&gt;EXTRA_HEAD_DATA = """
&amp;lt;link rel="stylesheet" href="//cdnjs.cloudflare.com/ajax/libs/highlight.js/8.5/styles/default.min.css"&amp;gt;
&amp;lt;script src="//cdnjs.cloudflare.com/ajax/libs/highlight.js/8.5/highlight.min.js"&amp;gt;&amp;lt;/script&amp;gt;

&amp;lt;script src="//cdnjs.cloudflare.com/ajax/libs/highlight.js/8.5/languages/lisp.min.js"&amp;gt;&amp;lt;/script&amp;gt;
&amp;lt;script src="//cdnjs.cloudflare.com/ajax/libs/highlight.js/8.5/languages/r.min.js"&amp;gt;&amp;lt;/script&amp;gt;

&amp;lt;script&amp;gt;hljs.initHighlightingOnLoad();&amp;lt;/script&amp;gt;
"""
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;

&lt;p&gt;
As you can see, I added syntax highlighting for &lt;code&gt;lisp&lt;/code&gt; and &lt;code&gt;r&lt;/code&gt; in addition to
the defaults ones. You can change the theme from &lt;code&gt;default&lt;/code&gt; to others such as
&lt;code&gt;solarized_light&lt;/code&gt;. 
&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;

&lt;div id="outline-container-orgheadline5" class="outline-2"&gt;
&lt;h3 id="orgheadline5"&gt;&lt;span class="section-number-2"&gt;4&lt;/span&gt; How to use&lt;/h3&gt;
&lt;div class="outline-text-2" id="text-4"&gt;
&lt;p&gt;
Just call &lt;code&gt;org2nikola-export-subtree&lt;/code&gt; in the subtree that you want to export
as a nikola post. It will ask you where is the root directory for your nikola
blog. It seems it just uses the top level heading.
&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;/div&gt;</description><category>blogging</category><category>emacs</category><category>nikola</category><category>org</category><guid>http://joonro.github.io/blog/posts/changed-the-blog-engine-to-nikola/</guid><pubDate>Sun, 03 May 2015 04:49:55 GMT</pubDate></item></channel></rss>